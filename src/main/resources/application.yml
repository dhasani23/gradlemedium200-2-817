# Main application configuration file for gradlemedium200 e-commerce platform
# Contains Spring Boot and AWS service settings

# Server configuration
server:
  port: 8080
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/plain,text/css,application/javascript
  tomcat:
    max-threads: 200
    min-spare-threads: 20

# Spring configuration
spring:
  application:
    name: gradlemedium200
  profiles:
    active: dev
  jackson:
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
  mvc:
    throw-exception-if-no-handler-found: true
  resources:
    add-mappings: false
  main:
    allow-bean-definition-overriding: true
    banner-mode: console
  task:
    execution:
      pool:
        core-size: 10
        max-size: 20
        queue-capacity: 50
        keep-alive: 60s

# AWS Configuration
aws:
  region: us-west-2
  credentials:
    access-key: ${AWS_ACCESS_KEY:PLACEHOLDER_ACCESS_KEY}
    secret-key: ${AWS_SECRET_KEY:PLACEHOLDER_SECRET_KEY}
  sns:
    endpoint: https://sns.us-west-2.amazonaws.com
    topics:
      order-events: order-events-${spring.profiles.active}
      user-events: user-events-${spring.profiles.active}
      product-events: product-events-${spring.profiles.active}
      notification-events: notification-events-${spring.profiles.active}
  sqs:
    endpoint: https://sqs.us-west-2.amazonaws.com
    queues:
      order-processing: order-processing-queue-${spring.profiles.active}
      notification-delivery: notification-delivery-queue-${spring.profiles.active}
      product-update: product-update-queue-${spring.profiles.active}
  dynamodb:
    endpoint: https://dynamodb.us-west-2.amazonaws.com
    tables:
      users: users-table-${spring.profiles.active}
      products: products-table-${spring.profiles.active}
      orders: orders-table-${spring.profiles.active}
      notifications: notifications-table-${spring.profiles.active}

# Module service endpoints
services:
  user-service:
    url: ${USER_SERVICE_URL:http://localhost:8081/api/users}
    connection-timeout: 5000
    read-timeout: 5000
    retry-max-attempts: 3
    retry-delay: 1000
  product-catalog:
    url: ${PRODUCT_CATALOG_URL:http://localhost:8082/api/products}
    connection-timeout: 5000
    read-timeout: 5000
    retry-max-attempts: 3
    retry-delay: 1000
  order-service:
    url: ${ORDER_SERVICE_URL:http://localhost:8083/api/orders}
    connection-timeout: 5000
    read-timeout: 5000
    retry-max-attempts: 3
    retry-delay: 1000
  notification-service:
    url: ${NOTIFICATION_SERVICE_URL:http://localhost:8084/api/notifications}
    connection-timeout: 5000
    read-timeout: 5000
    retry-max-attempts: 3
    retry-delay: 1000

# Management & Monitoring
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
    info:
      enabled: true
  health:
    diskspace:
      enabled: true
    db:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# Logging configuration
logging:
  level:
    root: INFO
    com.gradlemedium200: DEBUG
    org.springframework: INFO
    com.amazonaws: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %highlight(%-5level) [%thread] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} - %-5level [%thread] %logger{36} - %msg%n"
  file:
    name: logs/gradlemedium200.log
    max-size: 10MB
    max-history: 30

# Security configuration
security:
  jwt:
    token-validity-seconds: 86400
    secret-key: ${JWT_SECRET:gradlemedium200-jwt-secret-key-must-be-replaced-in-production}
  allowed-origins: localhost:3000,localhost:8080
  public-endpoints: /api/public/**,/actuator/health,/actuator/info

# Application specific settings
app:
  api-gateway:
    timeout: 30000
    rate-limit:
      enabled: true
      limit-per-hour: 1000
  cors:
    allowed-origins: http://localhost:3000,http://localhost:8080
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: Authorization,Content-Type
    max-age: 3600
  feature-flags:
    enable-caching: true
    enable-metrics: true
    enable-circuit-breaker: true
  cache:
    ttl-seconds: 300
    maximum-size: 1000

# Springdoc OpenAPI configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui
    display-request-duration: true
    operations-sorter: method
  packages-to-scan: com.gradlemedium200.controller